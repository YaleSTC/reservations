<%= simple_form_for @app_config, html: { multipart: true, class: 'form-horizontal' } do |f| %>

  <%= f.error_notification %>

  <fieldset>
    <legend>General</legend>
    <%= f.input :site_title, hint: "The Site Title is displayed in the title bar / tab in the browser, as well as in the navigation bar." %>
    <%= f.input :admin_email %>
    <%= f.input :department_name %>
    <%= f.input :home_link_text %>
    <%= f.input :home_link_location %>
    <%= f.input :contact_link_location, label: 'Contact Email', hint:
    'The email to which contact form submissions will be sent.' %>
    <%= f.input :default_per_cat_page, label: 'Items per page', hint:
    'Default number of items to display per page in the Catalog.' %>
    <%# Paperclip inline error fix %>
    <%= f.input :favicon, label: 'Custom Favicon', hint:
    "Displayed in the tab and address bar of most browsers. Must be <em>*.ico</em> #{current_favicon_and_options}".html_safe, wrapper_html: {class: paperclip_field_error(f, :favicon_content_type)} do %>
      <%= f.input_field :favicon, as: :file %>
      <%= f.error :favicon_content_type %>
    <% end %>

    <% if @app_config.favicon.present? %>
      <div class='control-group'>
        <div class="controls">
          <%= label_tag 'restore_favicon' do %>
            <%= check_box_tag 'restore_favicon', nil, false %>
            <%= 'Restore default favicon?' %>
          <% end %>
        </div>
      </div>
    <% end %>
  </fieldset>

  <fieldset>
    <legend>Unregistered Users</legend>
    <%= f.input :enable_new_users, label: 'Enable User Creation', hint: 'Allow people to create user accounts.' %>
    <%= f.input :enable_guests, label: 'Enable Guest Access', hint: 'Allow people to browse the catalog without signing in.' %>
    <%= f.input :require_phone, label: 'Are users required to provide a phone number?' %>
  </fieldset>

  <fieldset>
    <legend>Additional Permissions for Checkout Persons</legend>
    <%= f.input :checkout_persons_can_edit, label: 'Edit reservations', hint: 'Allow checkout persons to edit reservations.' %>
    <%= f.input :override_on_create, label: 'Override on create', hint: 'Give checkout persons admin-level override capability when creating a reservation. For example, they would be able to create a reservation on a blackout date, or for a period longer than the permitted length for that item.' %>
    <%= f.input :override_at_checkout, label: 'Override at checkout', hint: 'Give checkout persons admin-level override capability when checking out. For example, they would be able to checkout equipment to someone with an overdue reservation.' %>
  </fieldset>

  <fieldset>
    <legend>Reservation Settings</legend><br />
    <%= f.input :requests_affect_availability, label: 'Allow requests to affect equipment availability?', hint: 'When enabled, reservation requests will affect equipment item availability before the request is approved.' %>
    <%= f.input :disable_requests, label: 'Disable reservation requests?', hint: 'When enabled, users will not be able to create special reservation requests.' %>
    <%= f.input :notify_admin_on_create, label: 'Notify admin on creation?',hint: 'When enabled, admins will get an e-mail whenever a reservation is created.' %>
    <%= f.input :request_text, label: 'Reservation request text', input_html: {rows: 10},
      hint: 'This message will be displayed to users who are about to file a reservation request for invalid reservations. You can use markdown in this field' %>
    <%= render partial: 'shared/markdown_button' %>
    <%= f.input :autodeactivate_on_archive, label: 'Autodeactivate equipment after archiving?',hint: 'When enabled, the equipment item assigned to a reservation will be automatically deactivated when that reservation is archived.' %>
  </fieldset>

  <fieldset>
    <legend>Renewals</legend>
    <%= f.input :enable_renewals, label: 'Enable renewals', hint: 'Allow users to renew reservations.' %>
  </fieldset>

  <fieldset>
    <legend>Emails</legend><br />
    <p>
      Configure notifications that will be sent to users.
    </p>
    <p>
      Please note that by default all emails sent to users include a salutation (e.g. "Dear John") and a closing (e.g. "Sincerely, John Doe Library")
    </p>
    <p>
    Emails make use of variables; variables are placeholders that are automatically replaced with user- and reservation- specific information.<br />
      You can use the following variables in each email:
    </p>
    <dl>
      <dt>@user@</dt><dd>The full name of the user.</dd>
      <dt>@equipment_list@</dt><dd>The list of equipment that user either has reserved, missed, overdue, or checked out.</dd>
      <dt>@reservation_id@</dt><dd>The id number of the reservation.</dd>
      <dt>@department_name@</dt><dd>The department name set above.</dd>
      <dt>@start_date@</dt><dd>The start date for the reservation.</dd>
      <dt>@return_date@</dt><dd>The due date for the reservation.</dd>
      <dt>@late_fee@</dt><dd>The daily late fee for the equipment model in the reservation.</dd>
      <dt>@replacement_fee@</dt><dd>The replacement fee for the equipment model in the reservation</dd>
      <dt>@tos@</dt><dd>The terms of service</dd>
    </dl>
    <hr />
    <%= f.input :disable_user_emails, label: 'Disable all user e-mails', hint: 'Prevent Reservations from sending any e-mails to users.' %>
    <hr />
    <%= f.input :upcoming_checkin_email_active, label: 'Send equipment check-in reminders?',
                hint: 'When enabled, patrons will get an email reminding them that reservation(s) are due.' %>
    <%= f.input :upcoming_checkin_email_body, input_html: {rows: 10} %>
    <hr />

    <%= f.input :upcoming_checkout_email_active, label: 'Send equipment check-out reminders?',
                hint: 'When enabled, patrons will get an email reminding them that reservation(s) are '\
                'available to check-out' %>
    <%= f.input :upcoming_checkout_email_body, input_html: {rows: 10} %>
    <hr />

    <%= f.input :overdue_checkin_email_active, label: 'Send overdue check-in reminders?',
                hint: 'When enabled, patrons who have overdue equipment will get an email informing them about late fees and other consequences.' %>
    <%= f.input :overdue_checkin_email_body, input_html: {rows: 10} %>
    <hr />
    <%= f.input :res_exp_time, label: 'Days to keep missed reservations',
        hint: 'Missed reservations a certain number of days old can be automatically deleted. Leave blank to keep all missed reservations forever.' %>
    <%= f.input :send_notifications_for_deleted_missed_reservations, label: 'Send notifications?',
                hint: 'When enabled, patrons will be notified that their reservations were deleted.' %>
    <%= f.input :deleted_missed_reservation_email_body, input_html: {rows: 10} %>
    <hr />

  </fieldset>
  <fieldset>
    <legend>Terms of Service</legend>
    <%= f.input :terms_of_service, input_html: {rows: 20} %>
    <% unless params[:controller] == "application_setup" %>
      <%= f.input :reset_tos_for_users, input_html: {type: 'checkbox', value: '1'}, label: "Force all patrons to accept the TOS again?", :hint => "i.e., if patrons need to be aware that the terms of service have changed." %>
    <% end %>
  </fieldset>

  <fieldset>
    <legend>Blackout Dates</legend>
    <%= f.input :blackout_exp_time, label: 'Days to keep old blackouts',
        hint: 'Blackout dates a certain number of days old can be automatically deleted. Leave blank to keep all blackouts forever.' %>
  </fieldset>

  <div class="form-group">
    <div class="col-sm-offset-2 col-sm-10">
      <%= f.button :submit, 'Update Settings' %>
    </div>
  </div>

<% end %>
